plugins {
	id "fabric-loom" version "1.8-SNAPSHOT"
	id "legacy-looming" version "1.8-SNAPSHOT" // Version must be the same as fabric-loom's
	id "maven-publish"
}

base.archivesName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "cursed-mappings"
		url = "https://raw.githubusercontent.com/BleachDev/cursed-mappings/main/"
	}
}

loom {
	// Only needed for versions not available from vanilla launcher by default.
	// customMinecraftManifest.set("https://meta.legacyfabric.net/v2/manifest/${minecraft_version}")

	// Required by 1.7.x
	// runs {
	// 	client {
	// 		programArgs "--userProperties", "{}"
	// 	}
	// }
}

legacyLooming {
	// 	The generation of intermediary to use, default is 1.
	// 	legacy.yarn() will automatically point at the variant for the set intermediary generation.
	// 	However do not forget to set the right build number of legacy yarn as they are different per variant.
	//	intermediaryVersion = 2

	// 	Wether to use Legacy Fabric intermediaries or Upstream/Official FabricMC ones.
	//	Default to true: use Legacy Fabric intermediaries.
	// 	If setting to false, don't forget to also set intermediaryVersion to generation 2.
	//	useLFIntermediary.set(false)
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(legacy.yarn(project.minecraft_version, project.yarn_build))
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	implementation("io.github.humbleui:skija-windows-x64:0.116.2")
	implementation("io.github.humbleui:skija-linux-x64:0.116.2")

	implementation 'com.google.code.gson:gson:2.8.8'  // For JSON handling
	implementation 'commons-io:commons-io:2.8.0'  // For FileUtils, if needed

	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'

	testCompileOnly 'org.projectlombok:lombok:1.18.34'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

	modImplementation "net.legacyfabric.legacy-fabric-api:legacy-fabric-api:${project.fabric_version}"

	// You can retrieve a specific api module using this notation.
	// modImplementation(legacy.apiModule("legacy-fabric-item-groups-v1", project.fabric_version))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 21
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// Select the repositories you want to publish to
	repositories {
		// Uncomment to publish to the local maven
		// mavenLocal()
	}
}
